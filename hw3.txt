#include <pthread.h>
#include <stdio.h>
#include <stdlib.h>
#include <sys/time.h>

#define usec_elapsed(s,e) (1000000 * ((e).tv_sec-(s).tv_sec) + ((e).tv_usec-(s).tv_usec))

/* ========== 第一部分：產生 1~N 數列、複製、加總 ========== */
int sum; /* this data is shared by the thread(s) */
void *runner(void *param); /* threads call this function */

void listncopy_int(int *src, int *dst, int n)
{
    for (int i = 0; i < n; i++)
        dst[i] = src[i];
}

/* ========== 第二部分：多執行緒 bubble sort 與合併 ========== */
int original_list[] = {7, 12, 19, 3, 18, 4, 2, 6, 15, 8};
#define N_LIST (sizeof(original_list)/sizeof(int))
unsigned long t0, t1, tm;

int *listncopy(int *dst, int *src, int n) {
    int i;
    for(i = 0; i < n; i++) dst[i] = src[i];
    return dst;
}

void print_list(char *id, char *msg, int *first, int n) {
    printf("%s %s:", id, msg);
    while(n-- > 0) printf(" %d", *first++);
    printf("\n");
}

unsigned long do_sort(char *id, int *first, int n) {
    struct timeval start, end;
    unsigned long usec;
    print_list(id, "Sub-Old", first, n);
    gettimeofday(&start, NULL);

    // Bubble sort
    for (int i = 0; i < n - 1; i++) {
        for (int j = 0; j < n - i - 1; j++) {
            if (first[j] > first[j + 1]) {
                int temp = first[j];
                first[j] = first[j + 1];
                first[j + 1] = temp;
            }
        }
    }

    gettimeofday(&end, NULL);
    print_list(id, "Sub-New", first, n);
    usec = usec_elapsed(start, end);
    printf("%s spent %lu usec\n", id, usec);
    return usec;
}

// 合併排序（僅量測時間，未實作實際合併）
unsigned long do_merge(char *id, int *first, int n) {
    struct timeval start, end;
    unsigned long usec;
    gettimeofday(&start, NULL);
    // 此處可實作合併排序
    gettimeofday(&end, NULL);
    usec = usec_elapsed(start, end);
    printf("%s merge spent %lu usec\n", id, usec);
    return usec;
}

// 執行緒函式
void *thread_sort0(void *arg) {
    t0 = do_sort("A1055501#0", original_list, N_LIST/2);
    return NULL;
}
void *thread_sort1(void *arg) {
    t1 = do_sort("A1055501#1", original_list + N_LIST/2, N_LIST/2);
    return NULL;
}
void *thread_merge(void *arg) {
    tm = do_merge("A1055501#M", original_list, N_LIST);
    return NULL;
}

/* ========== 第一部分的 thread function ========== */
void *runner(void *param)
{
    int i, upper = atoi((char *)param);
    sum = 0;

    /* 新增 list 並填值 */
    int *list = (int *)malloc(sizeof(int) * upper);
    for (i = 0; i < upper; i++)
        list[i] = i + 1;

    /* 複製 list 到 copy */
    int *copy = (int *)malloc(sizeof(int) * upper);
    listncopy_int(list, copy, upper);

    /* 印出 copy 的內容 */
    printf("copy: ");
    for (i = 0; i < upper; i++) {
        printf("%d ", copy[i]);
        sum += list[i];
    }
    printf("\n");

    free(list);
    free(copy);

    pthread_exit(0);
}

/* ========== 主程式 ========== */
int main(int argc, char *argv[])
{
    /* --- 第一部分 --- */
    if (argc > 1) {
        pthread_t tid;              /* the thread identifier */
        pthread_attr_t attr;        /* set of thread attributes */

        pthread_attr_init(&attr);
        pthread_create(&tid, &attr, runner, argv[1]);
        pthread_join(tid, NULL);
        printf("A10555501 sum = %d\n", sum);
    } else {
        printf("未輸入參數，略過第一部分\n");
    }

    /* --- 第二部分 --- */
    int mylist[N_LIST];
    pthread_t tid0, tid1, tidm;

    printf("\n==== 第二部分：多執行緒排序 ====\n");
    listncopy(mylist, original_list, N_LIST);  // Step 1
    do_sort("A1055501-X", mylist, N_LIST);     // Step 2

    print_list("A1055501-M", "All-Old", original_list, N_LIST);

    pthread_create(&tid0, NULL, thread_sort0, NULL);
    pthread_create(&tid1, NULL, thread_sort1, NULL);

    pthread_join(tid0, NULL);
    pthread_join(tid1, NULL);

    pthread_create(&tidm, NULL, thread_merge, NULL);
    pthread_join(tidm, NULL);

    print_list("A1055501-M", "All-New", original_list, N_LIST);
    printf("A1055501-M spent %lu usec\n", t0 + t1 + tm);

    return 0;
}
